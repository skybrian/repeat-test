import { PickList } from "./picks.ts";
import { Node } from "./searches.ts";
import Arbitrary, { PickFunction } from "./arbitrary_class.ts";

/**
 * Picks from the possible values generated by an Arbitrary, without
 * replacement.
 *
 * This can be used to generate permutations.
 */
export class Jar<T> {
  private start: Node = Node.makeStart();
  private acceptPicks = (picks: PickList) =>
    Node.prunePlayout(this.start, picks);

  constructor(readonly arb: Arbitrary<T>) {}

  /**
   * Returns true if there are any values left that haven't been used.
   */
  isEmpty(): boolean {
    return this.start.branchesLeft === 0;
  }

  /**
   * Picks from an arbitrary with a filter that prevents it from using the same
   * pick sequence twice.
   *
   * @throws {@link Pruned} if the picks were used already.
   */
  pickUnused(pick: PickFunction): T {
    return pick(this.arb, { acceptPicks: this.acceptPicks });
  }
}
