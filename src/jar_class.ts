import type { PickRequest } from "./picks.ts";
import type { PlayoutSource } from "./backtracking.ts";
import type {
  IntPickerMiddleware,
  PickFunction,
  PickSet,
  Script,
} from "./build.ts";
import type { Gen } from "./gen_class.ts";
import type { Domain } from "./domain_class.ts";

import { assert } from "@std/assert";
import { generate } from "./build.ts";
import { PickTree } from "./pick_tree.ts";
import { orderedPlayouts } from "./ordered.ts";

/**
 * Picks from the possible values in a Domain, without replacement.
 *
 * A jar can be used to generate permutations or unique ids.
 */
export class Jar<T> {
  private readonly build: Script<T>;

  private readonly remaining = new PickTree();

  /**
   * An example that hasn't been taken, serving as proof that the jar isn't
   * empty.
   *
   * It should be regenerated by the domain so that the picks are canonical.
   */
  private example: Gen<T> | undefined;

  /**
   * A source of additional examples to test. It won't run out until the jar is
   * empty.
   */
  private readonly moreExamples: PlayoutSource;

  /**
   * Creates a mutable set of all the values in a domain.
   *
   * (Conceptually; the values will be generated when needed.)
   */
  constructor(readonly dom: Domain<T>) {
    const name = `take(${this.dom.name})`;
    this.build = this.dom.buildScript.with({ name });
    this.moreExamples = orderedPlayouts();
    this.example = this.#nextExample();
  }

  /**
   * Returns true if there are any values left in the jar.
   */
  isEmpty(): boolean {
    return this.example === undefined;
  }

  /**
   * Takes a previously-unused value from the jar.
   *
   * @throws {@link Pruned} if the jar is empty.
   */
  take(pick: PickFunction): T {
    const wrapped: PickSet<T> = { buildScript: this.build };

    const remaining = this.remaining;
    function middle(): IntPickerMiddleware {
      const walk = remaining.walk();
      function narrowToRemaining(
        req: PickRequest,
        next: (req: PickRequest) => number,
      ): number {
        const innerReq = walk.narrow(req);
        assert(innerReq !== undefined);
        const n = next(innerReq);
        assert(walk.push(req, n));
        return n;
      }
      return narrowToRemaining;
    }

    const val = pick(wrapped, { middle, accept: this.#accept });
    this.#refreshExample();
    return val;
  }

  #accept = (val: T): boolean => {
    // Compare using the canonical picks for this value.
    const canon = this.dom.regenerate(val);
    assert(canon.ok, "regenerate should always succeed");

    return this.remaining.prune(canon.picks);
  };

  #refreshExample(): void {
    while (this.example !== undefined) {
      if (this.remaining.available(this.example.replies)) {
        return; // still valid
      }
      this.example = this.#nextExample();
    }
    return; // empty
  }

  #nextExample(): Gen<T> | undefined {
    const next = generate(this.dom, this.moreExamples);
    if (next === undefined) {
      return undefined;
    }
    const regen = this.dom.regenerate(next.val);
    assert(regen.ok, "regenerate should always succeed");
    return regen;
  }
}
